import sqlite3
from collections import defaultdict
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import logging
from database import db_manager

logger = logging.getLogger(__name__)

REPORT_FILE = "monthly_report.txt"

class ReportGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.db_manager = db_manager
    
    def generate_monthly_report(self, year: int = None, month: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if year is None or month is None:
                now = datetime.now()
                year = now.year
                month = now.month
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
            expenses = self.db_manager.get_monthly_expenses(year, month)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            analysis = self._analyze_expenses(expenses)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_content = self._format_monthly_report(year, month, analysis)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self._save_report_to_file(report_content, f"monthly_report_{year}_{month:02d}.txt")
            
            return f"–û—Ç—á–µ—Ç –∑–∞ {year}-{month:02d} —Å–æ–∑–¥–∞–Ω: monthly_report_{year}_{month:02d}.txt"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            raise
    
    def generate_weekly_report(self, start_date: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if start_date is None:
                start_date = datetime.now().strftime("%Y-%m-%d")
            
            end_date = (datetime.strptime(start_date, "%Y-%m-%d") + timedelta(days=6)).strftime("%Y-%m-%d")
            
            expenses = self.db_manager.get_expenses(start_date=start_date, end_date=end_date)
            analysis = self._analyze_expenses(expenses)
            
            report_content = self._format_weekly_report(start_date, end_date, analysis)
            self._save_report_to_file(report_content, f"weekly_report_{start_date}.txt")
            
            return f"–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: weekly_report_{start_date}.txt"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            raise
    
    def generate_category_analysis(self, start_date: str = None, end_date: str = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            expenses = self.db_manager.get_expenses(start_date=start_date, end_date=end_date)
            return self._analyze_expenses(expenses)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}")
            raise
    
    def generate_payment_method_analysis(self, start_date: str = None, end_date: str = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã"""
        try:
            expenses = self.db_manager.get_expenses(start_date=start_date, end_date=end_date)
            
            payment_totals = defaultdict(float)
            total = 0.0
            
            for date, amount, category, payment_method, description, expense_id in expenses:
                payment_totals[payment_method] += amount
                total += amount
            
            return {
                'payment_methods': dict(payment_totals),
                'total': total,
                'count': len(expenses)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã: {e}")
            raise
    
    def generate_daily_breakdown(self, start_date: str = None, end_date: str = None) -> Dict:
        """–†–∞–∑–±–∏–≤–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º"""
        try:
            expenses = self.db_manager.get_expenses(start_date=start_date, end_date=end_date)
            
            daily_totals = defaultdict(float)
            daily_categories = defaultdict(lambda: defaultdict(float))
            
            for date, amount, category, payment_method, description, expense_id in expenses:
                day = date.split(' ')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                daily_totals[day] += amount
                daily_categories[day][category] += amount
            
            return {
                'daily_totals': dict(daily_totals),
                'daily_categories': dict(daily_categories)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ –¥–Ω—è–º: {e}")
            raise
    
    def _analyze_expenses(self, expenses: List[Tuple]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        expenses_by_category = defaultdict(float)
        expenses_by_payment_method = defaultdict(float)
        total = 0.0
        count = len(expenses)
        
        for date, amount, category, payment_method, description, expense_id in expenses:
            expenses_by_category[category] += amount
            expenses_by_payment_method[payment_method] += amount
            total += amount
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
        sorted_categories = sorted(expenses_by_category.items(), key=lambda x: x[1], reverse=True)
        sorted_payment_methods = sorted(expenses_by_payment_method.items(), key=lambda x: x[1], reverse=True)
        
        return {
            'categories': dict(expenses_by_category),
            'sorted_categories': sorted_categories,
            'payment_methods': dict(expenses_by_payment_method),
            'sorted_payment_methods': sorted_payment_methods,
            'total': total,
            'count': count,
            'average': total / count if count > 0 else 0
        }
    
    def _format_monthly_report(self, year: int, month: int, analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        report = []
        report.append("=" * 50)
        report.append(f"üìä –û–¢–ß–ï–¢ –ó–ê {month_names[month-1].upper()} {year}")
        report.append("=" * 50)
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üí∞ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"   –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {analysis['total']:.2f} ‚ÇΩ")
        report.append(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {analysis['count']}")
        report.append(f"   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {analysis['average']:.2f} ‚ÇΩ")
        report.append("")
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if analysis['sorted_categories']:
            report.append("üìÇ –†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
            for category, amount in analysis['sorted_categories']:
                percentage = (amount / analysis['total']) * 100 if analysis['total'] > 0 else 0
                report.append(f"   {category}: {amount:.2f} ‚ÇΩ ({percentage:.1f}%)")
            report.append("")
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
        if analysis['sorted_payment_methods']:
            report.append("üí≥ –†–ê–°–•–û–î–´ –ü–û –°–ü–û–°–û–ë–ê–ú –û–ü–õ–ê–¢–´:")
            for method, amount in analysis['sorted_payment_methods']:
                percentage = (amount / analysis['total']) * 100 if analysis['total'] > 0 else 0
                report.append(f"   {method}: {amount:.2f} ‚ÇΩ ({percentage:.1f}%)")
            report.append("")
        
        
        report.append("=" * 50)
        report.append(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        report.append("=" * 50)
        
        return "\n".join(report)
    
    def _format_weekly_report(self, start_date: str, end_date: str, analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = []
        report.append("=" * 50)
        report.append(f"üìä –ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ({start_date} - {end_date})")
        report.append("=" * 50)
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üí∞ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"   –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {analysis['total']:.2f} ‚ÇΩ")
        report.append(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {analysis['count']}")
        report.append(f"   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {analysis['average']:.2f} ‚ÇΩ")
        report.append(f"   –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {analysis['total'] / 7:.2f} ‚ÇΩ")
        report.append("")
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if analysis['sorted_categories']:
            report.append("üìÇ –†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
            for category, amount in analysis['sorted_categories']:
                percentage = (amount / analysis['total']) * 100 if analysis['total'] > 0 else 0
                report.append(f"   {category}: {amount:.2f} ‚ÇΩ ({percentage:.1f}%)")
        
        return "\n".join(report)
    
    def _save_report_to_file(self, content: str, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)
            logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            raise

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
report_generator = ReportGenerator()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def generate_monthly_report():
    return report_generator.generate_monthly_report()