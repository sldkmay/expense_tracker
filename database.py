import sqlite3
from datetime import datetime
from typing import List, Tuple, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DB_NAME = "expenses.db"

class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    
    def __init__(self, db_name: str = DB_NAME):
        self.db_name = db_name
        self.init_database()
    
    def connect_db(self) -> sqlite3.Connection:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_name)
            conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
            return conn
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                self._create_tables(cursor)
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    def _create_tables(self, cursor: sqlite3.Cursor):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        tables = {
            'users': '''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT NOT NULL UNIQUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''',
            'categories': '''
                CREATE TABLE IF NOT EXISTS categories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL UNIQUE,
                    color TEXT DEFAULT '#2E86AB',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''',
            'payment_methods': '''
                CREATE TABLE IF NOT EXISTS payment_methods (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    method_name TEXT NOT NULL UNIQUE,
                    icon TEXT DEFAULT 'üí≥',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''',
            'expenses': '''
                CREATE TABLE IF NOT EXISTS expenses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    category_id INTEGER NOT NULL,
                    payment_method_id INTEGER NOT NULL,
                    amount REAL NOT NULL CHECK(amount > 0),
                    description TEXT DEFAULT '',
                    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                    FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE,
                    FOREIGN KEY (payment_method_id) REFERENCES payment_methods(id) ON DELETE CASCADE
                )
            ''',
            'budgets': '''
                CREATE TABLE IF NOT EXISTS budgets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    category_id INTEGER,
                    amount REAL NOT NULL CHECK(amount > 0),
                    period TEXT DEFAULT 'monthly',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                    FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
                )
            '''
        }
        
        for table_name, sql in tables.items():
            cursor.execute(sql)
            logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._update_existing_tables(cursor)
    
    def _update_existing_tables(self, cursor: sqlite3.Cursor):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ payment_methods
            cursor.execute("PRAGMA table_info(payment_methods)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'icon' not in columns:
                cursor.execute("ALTER TABLE payment_methods ADD COLUMN icon TEXT DEFAULT 'üí≥'")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ icon –≤ payment_methods")
            
            if 'created_at' not in columns:
                cursor.execute("ALTER TABLE payment_methods ADD COLUMN created_at TIMESTAMP")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ created_at –≤ payment_methods")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ categories
            cursor.execute("PRAGMA table_info(categories)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'color' not in columns:
                cursor.execute("ALTER TABLE categories ADD COLUMN color TEXT DEFAULT '#2E86AB'")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ color –≤ categories")
            
            if 'created_at' not in columns:
                cursor.execute("ALTER TABLE categories ADD COLUMN created_at TIMESTAMP")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ created_at –≤ categories")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ users
            cursor.execute("PRAGMA table_info(users)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'created_at' not in columns:
                cursor.execute("ALTER TABLE users ADD COLUMN created_at TIMESTAMP")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ created_at –≤ users")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ expenses
            cursor.execute("PRAGMA table_info(expenses)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'description' not in columns:
                cursor.execute("ALTER TABLE expenses ADD COLUMN description TEXT DEFAULT ''")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ description –≤ expenses")
            
            if 'created_at' not in columns:
                cursor.execute("ALTER TABLE expenses ADD COLUMN created_at TIMESTAMP")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ created_at –≤ expenses")
                
        except sqlite3.Error as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def add_user(self, username: str) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('INSERT OR IGNORE INTO users (username) VALUES (?)', (username,))
                if cursor.rowcount == 0:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                    cursor.execute('SELECT id FROM users WHERE username = ?', (username,))
                    result = cursor.fetchone()
                    return result['id'] if result else None
                conn.commit()
                return cursor.lastrowid
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise
    
    def add_category(self, name: str, color: str = '#2E86AB') -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('INSERT OR IGNORE INTO categories (name, color) VALUES (?, ?)', (name, color))
                if cursor.rowcount == 0:
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
                    cursor.execute('SELECT id FROM categories WHERE name = ?', (name,))
                    result = cursor.fetchone()
                    return result['id'] if result else None
                conn.commit()
                return cursor.lastrowid
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            raise
    
    def add_payment_method(self, method_name: str, icon: str = 'üí≥') -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('INSERT OR IGNORE INTO payment_methods (method_name, icon) VALUES (?, ?)', 
                             (method_name, icon))
                if cursor.rowcount == 0:
                    # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                    cursor.execute('SELECT id FROM payment_methods WHERE method_name = ?', (method_name,))
                    result = cursor.fetchone()
                    return result['id'] if result else None
                conn.commit()
                return cursor.lastrowid
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            raise
    
    def get_user_id(self, username: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id FROM users WHERE username = ?', (username,))
                result = cursor.fetchone()
                return result['id'] if result else None
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise
    
    def get_category_id(self, category_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id FROM categories WHERE name = ?', (category_name,))
                result = cursor.fetchone()
                return result['id'] if result else None
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            raise
    
    def get_payment_method_id(self, method_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id FROM payment_methods WHERE method_name = ?', (method_name,))
                result = cursor.fetchone()
                return result['id'] if result else None
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            raise
    
    def add_expense(self, user_id: int, category_id: int, payment_method_id: int, 
                   amount: float, description: str = '') -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                cursor.execute('''
                    INSERT INTO expenses (user_id, category_id, payment_method_id, amount, description, date)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (user_id, category_id, payment_method_id, amount, description, date))
                conn.commit()
                return cursor.lastrowid
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
            raise
    
    def get_expenses(self, user_id: Optional[int] = None, 
                    start_date: Optional[str] = None, 
                    end_date: Optional[str] = None,
                    category_id: Optional[int] = None) -> List[Tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ description
                cursor.execute("PRAGMA table_info(expenses)")
                columns = [column[1] for column in cursor.fetchall()]
                has_description = 'description' in columns
                
                if has_description:
                    query = '''
                        SELECT e.date, e.amount, c.name, pm.method_name, e.description, e.id
                        FROM expenses e
                        JOIN categories c ON e.category_id = c.id
                        JOIN payment_methods pm ON e.payment_method_id = pm.id
                    '''
                else:
                    query = '''
                        SELECT e.date, e.amount, c.name, pm.method_name, '', e.id
                        FROM expenses e
                        JOIN categories c ON e.category_id = c.id
                        JOIN payment_methods pm ON e.payment_method_id = pm.id
                    '''
                
                conditions = []
                params = []
                
                if user_id:
                    conditions.append("e.user_id = ?")
                    params.append(user_id)
                
                if start_date:
                    conditions.append("DATE(e.date) >= ?")
                    params.append(start_date)
                
                if end_date:
                    conditions.append("DATE(e.date) <= ?")
                    params.append(end_date)
                
                if category_id:
                    conditions.append("e.category_id = ?")
                    params.append(category_id)
                
                if conditions:
                    query += " WHERE " + " AND ".join(conditions)
                
                query += " ORDER BY e.date DESC"
                
                cursor.execute(query, params)
                return cursor.fetchall()
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            raise
    
    def get_all_payment_methods(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT method_name FROM payment_methods ORDER BY method_name')
                return [row['method_name'] for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
            raise
    
    def get_all_categories(self) -> List[Tuple[int, str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å ID, –∏–º–µ–Ω–µ–º –∏ —Ü–≤–µ—Ç–æ–º"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id, name, color FROM categories ORDER BY name')
                return [(row['id'], row['name'], row['color']) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            raise
    
    def get_expenses_by_category(self, user_id: Optional[int] = None, 
                               start_date: Optional[str] = None,
                               end_date: Optional[str] = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            expenses = self.get_expenses(user_id, start_date, end_date)
            category_totals = {}
            
            for date, amount, category, payment_method, description, expense_id in expenses:
                if category not in category_totals:
                    category_totals[category] = 0
                category_totals[category] += amount
            
            return category_totals
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}")
            raise
    
    def get_monthly_expenses(self, year: int, month: int) -> List[Tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü"""
        start_date = f"{year:04d}-{month:02d}-01"
        if month == 12:
            end_date = f"{year+1:04d}-01-01"
        else:
            end_date = f"{year:04d}-{month+1:02d}-01"
        
        return self.get_expenses(start_date=start_date, end_date=end_date)
    
    def delete_expense(self, expense_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('DELETE FROM expenses WHERE id = ?', (expense_id,))
                conn.commit()
                return cursor.rowcount > 0
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
            raise
    
    def get_total_expenses(self, user_id: Optional[int] = None,
                          start_date: Optional[str] = None,
                          end_date: Optional[str] = None) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            with self.connect_db() as conn:
                cursor = conn.cursor()
                
                query = "SELECT SUM(amount) FROM expenses"
                conditions = []
                params = []
                
                if user_id:
                    conditions.append("user_id = ?")
                    params.append(user_id)
                
                if start_date:
                    conditions.append("DATE(date) >= ?")
                    params.append(start_date)
                
                if end_date:
                    conditions.append("DATE(date) <= ?")
                    params.append(end_date)
                
                if conditions:
                    query += " WHERE " + " AND ".join(conditions)
                
                cursor.execute(query, params)
                result = cursor.fetchone()
                return result[0] or 0.0
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            raise

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = DatabaseManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def connect_db():
    return db_manager.connect_db()

def create_tables():
    db_manager.init_database()

def add_user(username):
    return db_manager.add_user(username)

def add_category(name):
    return db_manager.add_category(name)

def add_payment_method(method_name):
    return db_manager.add_payment_method(method_name, 'üí≥')

def get_user_id(username):
    return db_manager.get_user_id(username)

def get_category_id(category_name):
    return db_manager.get_category_id(category_name)

def get_payment_method_id(method_name):
    return db_manager.get_payment_method_id(method_name)

def add_expense_to_db(user_id, category_id, payment_method_id, amount):
    return db_manager.add_expense(user_id, category_id, payment_method_id, amount)

def get_expenses():
    return db_manager.get_expenses()

def get_all_payment_methods():
    return db_manager.get_all_payment_methods()