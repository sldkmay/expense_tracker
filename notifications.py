import sqlite3
from collections import defaultdict
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import logging
from database import db_manager

logger = logging.getLogger(__name__)

class NotificationManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –ª–∏–º–∏—Ç–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    
    def __init__(self):
        self.db_manager = db_manager
        self.default_limits = {
            "–ö–æ—Ñ–µ": 1000,
            "–ï–¥–∞": 5000,
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": 2000,
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": 3000,
            "–ü–æ–∫—É–ø–∫–∏": 10000,
            "–ó–¥–æ—Ä–æ–≤—å–µ": 2000,
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": 5000
        }
    
    def check_spending_limits(self, user_id: int = None, 
                            custom_limits: Dict[str, float] = None) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            limits = custom_limits or self.default_limits
            current_month = datetime.now().strftime("%Y-%m")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            expenses = self.db_manager.get_expenses(
                user_id=user_id,
                start_date=f"{current_month}-01",
                end_date=f"{current_month}-31"
            )
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            spending = defaultdict(float)
            for date, amount, category, payment_method, description, expense_id in expenses:
                spending[category] += amount
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            warnings = []
            for category, limit in limits.items():
                if spending[category] > limit:
                    overage = spending[category] - limit
                    percentage = (spending[category] / limit) * 100
                    
                    if percentage > 200:  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞
                        message = f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {spending[category]:.2f} ‚ÇΩ (–ª–∏–º–∏—Ç: {limit} ‚ÇΩ, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {overage:.2f} ‚ÇΩ)"
                    elif percentage > 150:  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –≤ 1.5 —Ä–∞–∑–∞
                        message = f"‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {spending[category]:.2f} ‚ÇΩ (–ª–∏–º–∏—Ç: {limit} ‚ÇΩ, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {overage:.2f} ‚ÇΩ)"
                    else:
                        message = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {spending[category]:.2f} ‚ÇΩ (–ª–∏–º–∏—Ç: {limit} ‚ÇΩ, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {overage:.2f} ‚ÇΩ)"
                    
                    warnings.append(message)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            warnings.extend(self._check_daily_spending(expenses))
            warnings.extend(self._check_weekly_trends(expenses))
            
            return warnings
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}"]
    
    def _check_daily_spending(self, expenses: List[Tuple]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        warnings = []
        daily_totals = defaultdict(float)
        
        for date, amount, category, payment_method, description, expense_id in expenses:
            day = date.split(' ')[0]
            daily_totals[day] += amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –¥–µ–Ω—å –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –±–æ–ª—å—à–µ 5000 —Ä—É–±–ª–µ–π
        for day, total in daily_totals.items():
            if total > 5000:
                warnings.append(f"üí∏ –í—ã—Å–æ–∫–∏–µ –¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã {day}: {total:.2f} ‚ÇΩ")
        
        return warnings
    
    def _check_weekly_trends(self, expenses: List[Tuple]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        warnings = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
        weekly_totals = defaultdict(float)
        for date, amount, category, payment_method, description, expense_id in expenses:
            date_obj = datetime.strptime(date.split(' ')[0], "%Y-%m-%d")
            week_start = date_obj - timedelta(days=date_obj.weekday())
            week_key = week_start.strftime("%Y-%m-%d")
            weekly_totals[week_key] += amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç 20000 —Ä—É–±–ª–µ–π
        for week, total in weekly_totals.items():
            if total > 20000:
                warnings.append(f"üìà –í—ã—Å–æ–∫–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã ({week}): {total:.2f} ‚ÇΩ")
        
        return warnings
    
    def get_spending_forecast(self, user_id: int = None) -> Dict:
        """–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            current_month = datetime.now().strftime("%Y-%m")
            current_day = datetime.now().day
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            expenses = self.db_manager.get_expenses(
                user_id=user_id,
                start_date=f"{current_month}-01",
                end_date=f"{current_month}-31"
            )
            
            total_spent = sum(amount for date, amount, category, payment_method, description, expense_id in expenses)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            days_in_month = 30  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            daily_average = total_spent / current_day if current_day > 0 else 0
            forecast = daily_average * days_in_month
            
            return {
                'total_spent': total_spent,
                'daily_average': daily_average,
                'forecast': forecast,
                'days_passed': current_day,
                'days_remaining': days_in_month - current_day
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return {}
    
    def get_category_insights(self, user_id: int = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏"""
        try:
            current_month = datetime.now().strftime("%Y-%m")
            expenses = self.db_manager.get_expenses(
                user_id=user_id,
                start_date=f"{current_month}-01",
                end_date=f"{current_month}-31"
            )
            
            category_totals = defaultdict(float)
            category_counts = defaultdict(int)
            
            for date, amount, category, payment_method, description, expense_id in expenses:
                category_totals[category] += amount
                category_counts[category] += 1
            
            total_spent = sum(category_totals.values())
            insights = {}
            
            for category, total in category_totals.items():
                percentage = (total / total_spent) * 100 if total_spent > 0 else 0
                avg_transaction = total / category_counts[category] if category_counts[category] > 0 else 0
                
                insights[category] = {
                    'total': total,
                    'percentage': percentage,
                    'count': category_counts[category],
                    'average': avg_transaction
                }
            
            return {
                'insights': insights,
                'total_spent': total_spent,
                'most_expensive': max(category_totals.items(), key=lambda x: x[1]) if category_totals else None,
                'most_frequent': max(category_counts.items(), key=lambda x: x[1]) if category_counts else None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return {}
    
    def get_budget_recommendations(self, user_id: int = None) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            insights = self.get_category_insights(user_id)
            forecast = self.get_spending_forecast(user_id)
            
            recommendations = []
            
            if not insights or not forecast:
                return ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
            if forecast['forecast'] > 50000:
                recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å 50,000 ‚ÇΩ –≤ –º–µ—Å—è—Ü. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç—Ä–∞—Ç.")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for category, data in insights['insights'].items():
                if data['percentage'] > 40:
                    recommendations.append(f"üí° –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {data['percentage']:.1f}% –æ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.")
                
                if data['average'] > 5000:
                    recommendations.append(f"üí° –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {data['average']:.2f} ‚ÇΩ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –±—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.")
            
            # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –ø–æ–∫—É–ø–æ–∫
            if insights['most_frequent']:
                category, count = insights['most_frequent']
                if count > 10:
                    recommendations.append(f"üí° –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –±—ã–ª–æ {count} –ø–æ–∫—É–ø–æ–∫ –∑–∞ –º–µ—Å—è—Ü. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ.")
            
            return recommendations if recommendations else ["‚úÖ –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤—ã–≥–ª—è–¥—è—Ç —Ä–∞–∑—É–º–Ω–æ!"]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return [f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}"]

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def check_spending_limits():
    return notification_manager.check_spending_limits()