"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
"""

from database import db_manager
from reports import report_generator
from notifications import notification_manager
from utils import format_currency, format_date, get_date_range
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def example_basic_usage():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("=== –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager.init_database()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = db_manager.add_user("example_user")
    print(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    food_id = db_manager.add_category("–ï–¥–∞", "#FF6B6B")
    transport_id = db_manager.add_category("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "#4ECDC4")
    print(f"–°–æ–∑–¥–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ï–¥–∞ (ID: {food_id}), –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (ID: {transport_id})")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    card_id = db_manager.add_payment_method("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üí≥")
    cash_id = db_manager.add_payment_method("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "üíµ")
    print(f"–°–æ–∑–¥–∞–Ω—ã —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: –ö–∞—Ä—Ç–∞ (ID: {card_id}), –ù–∞–ª–∏—á–Ω—ã–µ (ID: {cash_id})")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
    expense1 = db_manager.add_expense(user_id, food_id, card_id, 1500.50, "–û–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")
    expense2 = db_manager.add_expense(user_id, transport_id, cash_id, 200.00, "–¢–∞–∫—Å–∏")
    expense3 = db_manager.add_expense(user_id, food_id, card_id, 300.75, "–ü—Ä–æ–¥—É–∫—Ç—ã")
    
    print(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã: {expense1}, {expense2}, {expense3}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
    expenses = db_manager.get_expenses(user_id=user_id)
    print(f"\n–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
    for date, amount, category, payment_method, description, expense_id in expenses:
        print(f"  {format_date(date)} | {format_currency(amount)} | {category} | {payment_method}")

def example_reports():
    """–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ ===")
    
    # –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
    monthly_report = report_generator.generate_monthly_report()
    print(f"–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: {monthly_report}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_analysis = report_generator.generate_category_analysis()
    print(f"\n–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, data in category_analysis['insights'].items():
        print(f"  {category}: {format_currency(data['total'])} ({data['percentage']:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
    payment_analysis = report_generator.generate_payment_method_analysis()
    print(f"\n–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:")
    for method, amount in payment_analysis['payment_methods'].items():
        print(f"  {method}: {format_currency(amount)}")

def example_notifications():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    print("\n=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    warnings = notification_manager.check_spending_limits()
    if warnings:
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        for warning in warnings:
            print(f"  {warning}")
    else:
        print("–ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
    forecast = notification_manager.get_spending_forecast()
    if forecast:
        print(f"\n–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        print(f"  –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_currency(forecast['total_spent'])}")
        print(f"  –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ: {format_currency(forecast['daily_average'])}")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {format_currency(forecast['forecast'])}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = notification_manager.get_budget_recommendations()
    print(f"\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for rec in recommendations:
        print(f"  {rec}")

def example_analytics():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    today_start, today_end = get_date_range("today")
    week_start, week_end = get_date_range("week")
    month_start, month_end = get_date_range("month")
    
    print(f"–ü–µ—Ä–∏–æ–¥—ã:")
    print(f"  –°–µ–≥–æ–¥–Ω—è: {today_start} - {today_end}")
    print(f"  –ù–µ–¥–µ–ª—è: {week_start} - {week_end}")
    print(f"  –ú–µ—Å—è—Ü: {month_start} - {month_end}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = db_manager.get_expenses_by_category()
    total = sum(category_stats.values())
    
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤—Å–µ–≥–æ: {format_currency(total)}):")
    for category, amount in sorted(category_stats.items(), key=lambda x: x[1], reverse=True):
        percentage = (amount / total) * 100 if total > 0 else 0
        print(f"  {category}: {format_currency(amount)} ({percentage:.1f}%)")

def example_utilities():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç ===")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    print(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    print(f"  1234.56 -> {format_currency(1234.56)}")
    print(f"  0.99 -> {format_currency(0.99)}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    print(f"\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã:")
    date_str = "2024-01-15 14:30:00"
    formatted = format_date(date_str)
    print(f"  {date_str} -> {formatted}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    print(f"\n–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã:")
    test_amounts = ["100.50", "0", "-10", "abc", "1000001"]
    for amount in test_amounts:
        valid, value, error = validate_amount(amount)
        print(f"  {amount}: {'‚úì' if valid else '‚úó'} {value} {error}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    try:
        print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
        print("=" * 50)
        
        example_basic_usage()
        example_reports()
        example_notifications()
        example_analytics()
        example_utilities()
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()

