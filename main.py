import tkinter as tk
from tkinter import messagebox, ttk, font
from datetime import datetime
import tkinter.font as tkFont
from database import (
    create_tables, add_user, add_category, add_payment_method,
    get_user_id, get_category_id, get_payment_method_id,
    add_expense_to_db, get_expenses, get_all_payment_methods
)
from notifications import check_spending_limits
from reports import generate_monthly_report

class ModernExpenseTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("üí∞ –¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤")
        self.root.geometry("900x700")
        self.root.configure(bg='#f0f0f0')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.load_expenses()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'primary': '#2E86AB',
            'secondary': '#A23B72', 
            'success': '#F18F01',
            'background': '#f0f0f0',
            'card': '#ffffff',
            'text': '#333333'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        self.style.configure('Title.TLabel', 
                           font=('Arial', 16, 'bold'),
                           foreground=self.colors['primary'])
        
        self.style.configure('Card.TFrame', 
                           background=self.colors['card'],
                           relief='raised',
                           borderwidth=1)
        
        self.style.configure('Modern.TButton',
                           font=('Arial', 10, 'bold'),
                           padding=(10, 5))

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        create_tables()
        add_user("default_user")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        payment_methods = ["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "üì± –û–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂", "üè¶ –ü–µ—Ä–µ–≤–æ–¥"]
        for method in payment_methods:
            add_payment_method(method)

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, style='Card.TFrame', padding=20)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üí∞ –¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤", style='Title.TLabel')
        title_label.pack(pady=(0, 20))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        self.create_add_expense_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        self.create_view_expenses_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_statistics_tab()

    def create_add_expense_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        add_frame = ttk.Frame(self.notebook, style='Card.TFrame', padding=20)
        self.notebook.add(add_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        form_frame = ttk.LabelFrame(add_frame, text="–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥", padding=15)
        form_frame.pack(fill='x', pady=(0, 20))
        
        # –°—É–º–º–∞
        ttk.Label(form_frame, text="üí∞ –°—É–º–º–∞ (—Ä—É–±.):", font=('Arial', 10, 'bold')).grid(row=0, column=0, sticky='w', pady=5)
        self.amount_entry = ttk.Entry(form_frame, font=('Arial', 11), width=20)
        self.amount_entry.grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        ttk.Label(form_frame, text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:", font=('Arial', 10, 'bold')).grid(row=1, column=0, sticky='w', pady=5)
        self.category_entry = ttk.Entry(form_frame, font=('Arial', 11), width=20)
        self.category_entry.grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        ttk.Label(form_frame, text="üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", font=('Arial', 10, 'bold')).grid(row=2, column=0, sticky='w', pady=5)
        self.payment_var = tk.StringVar()
        self.payment_combobox = ttk.Combobox(form_frame, textvariable=self.payment_var, 
                                           state="readonly", font=('Arial', 11), width=17)
        self.payment_combobox['values'] = get_all_payment_methods()
        self.payment_combobox.grid(row=2, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(form_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=20)
        
        add_button = ttk.Button(button_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", 
                              command=self.add_expense, style='Modern.TButton')
        add_button.pack(side='left', padx=(0, 10))
        
        clear_button = ttk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                                command=self.clear_form, style='Modern.TButton')
        clear_button.pack(side='left')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        form_frame.columnconfigure(1, weight=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.create_category_stats(add_frame)

    def create_category_stats(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        stats_frame = ttk.LabelFrame(parent, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", padding=15)
        stats_frame.pack(fill='x', pady=(20, 0))
        
        self.stats_text = tk.Text(stats_frame, height=8, font=('Consolas', 9), 
                                bg='#f8f9fa', relief='flat')
        self.stats_text.pack(fill='both', expand=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_category_stats()

    def create_view_expenses_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        view_frame = ttk.Frame(self.notebook, style='Card.TFrame', padding=20)
        self.notebook.add(view_frame, text="üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(view_frame)
        control_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.load_expenses, style='Modern.TButton').pack(side='left')
        
        ttk.Button(control_frame, text="üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", 
                  command=self.show_report, style='Modern.TButton').pack(side='left', padx=(10, 0))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        table_frame = ttk.Frame(view_frame)
        table_frame.pack(fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        columns = ("–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
        self.expenses_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for col in columns:
            self.expenses_tree.heading(col, text=col)
            self.expenses_tree.column(col, width=150, anchor='center')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient='vertical', command=self.expenses_tree.yview)
        self.expenses_tree.configure(yscrollcommand=scrollbar.set)
        
        self.expenses_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

    def create_statistics_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = ttk.Frame(self.notebook, style='Card.TFrame', padding=20)
        self.notebook.add(stats_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        general_stats = ttk.LabelFrame(stats_frame, text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=15)
        general_stats.pack(fill='x', pady=(0, 20))
        
        self.general_stats_text = tk.Text(general_stats, height=6, font=('Consolas', 10), 
                                        bg='#f8f9fa', relief='flat')
        self.general_stats_text.pack(fill='x')
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ttk.Button(stats_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                  command=self.update_general_stats, style='Modern.TButton').pack(pady=10)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_general_stats()

    def add_expense(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞"""
        amount = self.amount_entry.get().strip()
        category = self.category_entry.get().strip()
        payment_method = self.payment_var.get()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not amount or not category or not payment_method:
            messagebox.showwarning("‚ö†Ô∏è –û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        try:
            amount = float(amount)
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {e}")
            return

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            add_category(category)
            user_id = get_user_id("default_user")
            category_id = get_category_id(category)
            payment_method_id = get_payment_method_id(payment_method)

            add_expense_to_db(user_id, category_id, payment_method_id, amount)
            
            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            self.clear_form()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.load_expenses()
            self.update_category_stats()
            self.update_general_stats()
            
            messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–†–∞—Å—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            warnings = check_spending_limits()
            if warnings:
                messagebox.showwarning("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "\n".join(warnings))
                
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")

    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã"""
        self.amount_entry.delete(0, tk.END)
        self.category_entry.delete(0, tk.END)
        self.payment_combobox.set("")

    def load_expenses(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.expenses_tree.get_children():
            self.expenses_tree.delete(item)
        
        try:
            expenses = get_expenses()
            for expense in expenses:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ —Å 6 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                if len(expense) >= 4:
                    date, amount, category, payment_method = expense[0], expense[1], expense[2], expense[3]
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
                    formatted_amount = f"{amount:.2f} ‚ÇΩ"
                    
                    self.expenses_tree.insert("", "end", values=(
                        formatted_date, formatted_amount, category, payment_method
                    ))
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")

    def update_category_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            expenses = get_expenses()
            category_totals = {}
            
            for expense in expenses:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ —Å 6 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (date, amount, category, payment_method, description, id)
                if len(expense) >= 4:
                    date, amount, category, payment_method = expense[0], expense[1], expense[2], expense[3]
                    if category not in category_totals:
                        category_totals[category] = 0
                    category_totals[category] += amount
            
            # –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats_text.delete(1.0, tk.END)
            if category_totals:
                total = sum(category_totals.values())
                self.stats_text.insert(tk.END, f"–û–±—â–∞—è —Å—É–º–º–∞: {total:.2f} ‚ÇΩ\n\n")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
                sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
                
                for category, amount in sorted_categories:
                    percentage = (amount / total) * 100
                    self.stats_text.insert(tk.END, f"{category}: {amount:.2f} ‚ÇΩ ({percentage:.1f}%)\n")
            else:
                self.stats_text.insert(tk.END, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
                
        except Exception as e:
            self.stats_text.delete(1.0, tk.END)
            self.stats_text.insert(tk.END, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def update_general_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            expenses = get_expenses()
            current_month = datetime.now().strftime("%Y-%m")
            
            monthly_total = 0
            total_expenses = 0
            category_count = set()
            payment_methods = set()
            
            for expense in expenses:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ —Å 6 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                if len(expense) >= 4:
                    date, amount, category, payment_method = expense[0], expense[1], expense[2], expense[3]
                    total_expenses += amount
                    category_count.add(category)
                    payment_methods.add(payment_method)
                    
                    if date.startswith(current_month):
                        monthly_total += amount
            
            # –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.general_stats_text.delete(1.0, tk.END)
            self.general_stats_text.insert(tk.END, f"üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({current_month}): {monthly_total:.2f} ‚ÇΩ\n")
            self.general_stats_text.insert(tk.END, f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses:.2f} ‚ÇΩ\n")
            self.general_stats_text.insert(tk.END, f"üìÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_count)}\n")
            self.general_stats_text.insert(tk.END, f"üí≥ –°–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {len(payment_methods)}\n")
            self.general_stats_text.insert(tk.END, f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(expenses)}\n")
            
        except Exception as e:
            self.general_stats_text.delete(1.0, tk.END)
            self.general_stats_text.insert(tk.END, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def show_report(self):
        """–ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–∞"""
        try:
            message = generate_monthly_report()
            messagebox.showinfo("üìä –û—Ç—á–µ—Ç", message)
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = ModernExpenseTracker(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    width = root.winfo_width()
    height = root.winfo_height()
    x = (root.winfo_screenwidth() // 2) - (width // 2)
    y = (root.winfo_screenheight() // 2) - (height // 2)
    root.geometry(f'{width}x{height}+{x}+{y}')
    
    root.mainloop()

if __name__ == "__main__":
    main()