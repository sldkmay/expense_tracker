"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import db_manager
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db_manager.init_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user_id = db_manager.add_user("test_user")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user_id}")
        
        category_id = db_manager.add_category("–¢–µ—Å—Ç", "#FF0000")
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {category_id}")
        
        payment_id = db_manager.add_payment_method("üí≥ –¢–µ—Å—Ç", "üí≥")
        print(f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω: {payment_id}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
        expense_id = db_manager.add_expense(user_id, category_id, payment_id, 100.50, "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥")
        print(f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {expense_id}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
        expenses = db_manager.get_expenses()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
        
        for expense in expenses:
            print(f"   {expense}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_reports():
    """–¢–µ—Å—Ç –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        from reports import report_generator
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...")
        
        # –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        report = report_generator.generate_monthly_report()
        print(f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: {report}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        analysis = report_generator.generate_category_analysis()
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {len(analysis.get('insights', {}))} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
        return False

def test_notifications():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        from notifications import notification_manager
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        warnings = notification_manager.check_spending_limits()
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤: {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        forecast = notification_manager.get_spending_forecast()
        if forecast:
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑: {forecast.get('total_spent', 0):.2f} ‚ÇΩ")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("=" * 50)
    
    tests = [
        test_database,
        test_reports,
        test_notifications
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

